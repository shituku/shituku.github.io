[{"title":"hello shituku","url":"/2025/04/17/hello-shituku/","content":""},{"title":"Hello World","url":"/2025/04/17/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"loT基本知识","url":"/2025/04/19/loT%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/","content":"前置基础\nmips linux：使用mips指令架构的linux系统，广泛应用于嵌入式系统，路由器常用mips32和arm架构。\nrisc架构：精简指令集，包括mips、arm、risc-v。\nbusybox：精简终端，路由器shell多为裁剪版busybox，shell命令本质为busybox符号链接。\n\n路由的漏洞利用利用方式\n密码破解：默认密码、弱口令、字典爆破、侧信道（如服务器响应时间、返回数据包特征，爆破密码或PIN码）。\nweb漏洞：访问web管理服务与web界面交互，进行渗透（如SQL注入、RCE、CSRF、XSS）。\n后门：如缓冲区溢出、危险函数利用。\n\n密码破解\n默认密码、弱口令、字典爆破。\n侧信道攻击：利用响应时间、数据包特征爆破密码或PIN码。\n\nweb漏洞\nSQL注入、RCE、CSRF、XSS等。\n通过web管理界面进行渗透。\n\n后门\n可绕过安全控制获取访问权的漏洞。\n典型如32764端口后门等。\n\n缓冲区溢出\n危险函数：strcpy、sprintf、snprintf、strchr、gets、fgetc。\nsprintf：格式化字符串中有%s且未判断长度，可能栈溢出。\nsnprintf：返回值为输入长度，size为unsigned类型，需注意负数转大正数的溢出。\nstrchr：复制长度由?前字符串长度决定，需注意越界。\nfgetc：循环读取字符，注意循环边界。\n\n代码示例：\n// 使用snprintf安全格式化字符串，left为已写入长度// Use snprintf to safely format string, left is the length already writtenint left = snprintf(stack, sizeof(stack), &quot;%s&quot;, buf_from_http1);// 继续在stack后面追加内容，防止溢出// Continue appending to stack, prevent overflowsnprintf(stack+left, sizeof(stack)-left, &quot;%s&quot;, buf_from_http2);// 查找url中的&#x27;?&#x27;字符，获取查询参数位置// Find &#x27;?&#x27; in url to get query parameter positionchar *query = strchr(url, &#x27;?&#x27;);// 将url中&#x27;?&#x27;前的内容复制到stack，长度为query - url - 1// Copy content before &#x27;?&#x27; in url to stack, length is query - url - 1strncpy(stack, url, query - url - 1);\n\n逻辑漏洞\n多功能点组合利用，挖掘攻击链。\n\n注入类\n敏感函数：system、popen、exec、execve。\n过滤绕过：如$IFS绕过空格，xxd、base64编码。\n\n工具\nmipsAudit：mips静态汇编审计辅助脚本，回溯敏感函数审计危险函数。\n在IDA-&gt;file-&gt;Script FIle中加载，控制台输出信息并高亮显示。\n\nmips linux\nmips linux广泛用于嵌入式系统，路由器常用mips32和arm。\nmips通过a0-a3传递前4个参数，其余通过栈传递。\n叶子函数与非叶子函数的栈布局和调用方式不同。\n\nbusybox\nbusybox为精简终端，路由器shell多为其裁剪版。\n常用命令：\n\n$ busybox --help        # 查看支持命令 / Show supported commands$ uname -r              # 查看内核版本 / Show kernel version$ ls -al                # 查看详细文件列表 / List files in detail$ rm -rf /tmp           # 强制删除目录 / Force delete directory$ cp -R /tmp ./now      # 复制目录 / Copy directory$ du -sk fireware.bin   # 查看文件大小 / Show file size$ ps -ef                # 查看进程 / Show processes$ kill -9 pid           # 强制终止进程 / Force kill process$ killall -9 xxx        # 强制终止进程名 / Force kill by process name$ ifconfig -a           # 查看所有网卡信息 / Show all network interfaces\n\nHTTP协议\nCRLF：回车换行，C语言为\\r\\n，十六进制0A0D。\nURI：统一资源标识符，包括协议、主机名、端口、路径、查询字符串、片段标识符。\n\n文件系统\n路径作用：\n&#x2F;bin &#x2F;sbin &#x2F;usr&#x2F;bin &#x2F;usr&#x2F;sbin：存放应用程序\n&#x2F;lib &#x2F;usr&#x2F;lib：存放动态库\n&#x2F;etc：存放配置文件\n\n\n\n固件修复\n拿到固件后需模拟环境，缺少硬件易导致仿真失败。\n修复流程：定位异常函数，编写同功能函数并封装为动态库，使用LD_PRELOAD劫持。\n\n路由器漏洞原理与利用路由器web漏洞\nxss、csrf、基础认证漏洞（如http://admin:admin@192.168.0.1形式免输用户名密码）。\n基础认证漏洞可与xss、csrf组合，形成攻击链。\n\n路由器后门漏洞\n可绕过安全控制的漏洞。\n典型如32764端口后门。\n\n路由器溢出漏洞\nmips32函数调用与x86不同，参数传递和栈布局需注意。\n非叶子函数可正常溢出利用，叶子函数需溢出大量数据覆盖父函数返回地址。\n\n软件层分析固件获取\n路由器固件包含操作系统内核和文件系统。\n获取途径：厂商网站、web管理界面、硬件提取、云市场。\n\n文件系统\n路由器文件系统用于存储操作系统、配置文件、日志等。\n常见压缩格式：Squashfs（GZIP, LZMA, LZO, XZ）。\n提取方法：strings、hexdump、dd、file等命令结合使用。\n自动提取工具：binwalk。\n\n代码示例：\n$ strings firmware.bin | grep `python -c &#x27;print &quot;\\x28\\xcd\\x3d\\x45&quot;&#x27;`  # 查找特征字符串 / Find signature string$ dd if=firmware.bin bs=1 count=1024 skip=256 of=out.squashfs             # 提取文件系统 / Extract filesystem$ binwalk -Me x.bin --run-as=root                                         # 自动提取 / Auto extract\n\n硬件层分析\n通过路由器硬件接口获取固件，如JTAG、Flash芯片编程器、芯片夹等。\n路由器flash为常用内存类型，断电后仍保存数据。\nbootloader（如u-boot）负责设备启动和内核加载。\nkernel为操作系统内核，root filesystem为根文件系统。\nnvram保存配置文件，启动时读取。\n\n\n"}]